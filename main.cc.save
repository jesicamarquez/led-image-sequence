#include "thread.h"
#include "led-matrix.h"

#include <assert.h>
#include <unistd.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <algorithm>

using std::min;
using std::max;

// Base-class for a Thread that does something with a matrix.
class RGBMatrixManipulator : public Thread {
public:
  RGBMatrixManipulator(RGBMatrix *m) : running_(true), matrix_(m) {}
  virtual ~RGBMatrixManipulator() { running_ = false; }

// Run() implementation needs to check running_ regularly.
  protected:
    volatile bool running_;  // TODO: use mutex, but this is good enough for now.
    RGBMatrix *const matrix_;
};

// Pump pixels to screen. Needs to be high priority real-time because jitter
// here will make the PWM uneven.
class DisplayUpdater : public RGBMatrixManipulator {
public:
  DisplayUpdater(RGBMatrix *m) : RGBMatrixManipulator(m) {}

  void Run() {
    while (running_) {
      matrix_->UpdateScreen();
    }
  }
};

class ImageScroller : public RGBMatrixManipulator {
public:
  ImageScroller(RGBMatrix *m)
    : RGBMatrixManipulator(m), image_(NULL), horizontal_position_(0) {
  }

  // _very_ simplified. Can only read binary P6 PPM. Expects newlines in headers
  // Not really robust. Use at your own risk :)
  bool LoadPPM(const char *filename) {
    if (image_) {
      delete [] image_;
      image_ = NULL;
    }
    FILE *f = fopen(filename, "r");
    if (f == NULL) return false;
    char header_buf[256];
    const char *line = ReadLine(f, header_buf, sizeof(header_buf));
#define EXIT_WITH_MSG(m) { fprintf(stderr, "%s: %s |%s", filename, m, line); \
      fclose(f); return false; }
    if (sscanf(line, "P6 ") == EOF)
      EXIT_WITH_MSG("Can only handle P6 as PPM type.");
    line = ReadLine(f, header_buf, sizeof(header_buf));
    if (!line || sscanf(line, "%d %d ", &width_, &height_) != 2)
      EXIT_WITH_MSG("Width/height expected");
    int value;
    line = ReadLine(f, header_buf, sizeof(header_buf));
    if (!line || sscanf(line, "%d ", &value) != 1 || value != 255)
      EXIT_WITH_MSG("Only 255 for maxval allowed.");
    const size_t pixel_count = width_ * height_;
    image_ = new Pixel [ pixel_count ];
    assert(sizeof(Pixel) == 3);   // we make that assumption.
    if (fread(image_, sizeof(Pixel), pixel_count, f) != pixel_count) {
      line = "";
      EXIT_WITH_MSG("Not enough pixels read.");
    }
#undef EXIT_WITH_MSG
    fclose(f);
    fprintf(stderr, "Read image with %dx%d\n", width_, height_);
    horizontal_position_ = 0;
    return true;
  }

  void Run() {
    const int screen_height = matrix_->height();
    const int screen_width = matrix_->width();
    while (running_) {
      if (image_ == NULL) {
        usleep(100 * 1000);
        continue;
      }
      usleep(30 * 1000);
      for (int x = 0; x < screen_width; ++x) {
        for (int y = 0; y < screen_height; ++y) {
          const Pixel &p = getPixel(x, y);
          // Display upside down on my desk. Lets flip :)
          int disp_x = screen_width -x;
          int disp_y = screen_height -y;
          matrix_->SetPixel(disp_x, disp_y, p.red, p.green, p.blue);
        }
      }
	//printf("In image scroller run\n");
      ++horizontal_position_;
    }
  }

private:
  struct Pixel {
    uint8_t red;
    uint8_t green;
    uint8_t blue;
  };

  // Read line, skip comments.
  char *ReadLine(FILE *f, char *buffer, size_t len) {
    char *result;
    do {
      result = fgets(buffer, len, f);
    } while (result != NULL && result[0] == '#');
    return result;
  }

  const Pixel &getPixel(int x, int y) {
    static Pixel dummy;
    if (x < 0 || x > width_ || y < 0 || y > height_) return dummy;
    return image_[x + width_ * y];
  }

  int width_;
  int height_;
  Pixel *image_;
  uint32_t horizontal_position_;
};

int main(int argc, char *argv[]) {
  GPIO io [3];
  RGBMatrix m [3];
  RGBMatrixManipulator *image_gen [3] = {NULL, NULL, NULL};

  for(int i = 0; i < 3; i++ ) {
    if (!io[i].Init())
      return 1;

    RGBMatrix m[i] = m(;
  RGBMatrix m2(&io2);
  RGBMatrix m3(&io3);

  RGBMatrixManipulator *image_gen1 = NULL;
  RGBMatrixManipulator *image_gen2 = NULL;
  RGBMatrixManipulator *image_gen3 = NULL;

  if (argc > 1) {
    ImageScroller *scroller1 = new ImageScroller(&m1);
    ImageScroller *scroller2 = new ImageScroller(&m2);
    ImageScroller *scroller3 = new ImageScroller(&m3);

    if (!scroller1->LoadPPM(argv[1]))
      return 1;
    if (!scroller2->LoadPPM(argv[2]))
      return 1;
    if (!scroller3->LoadPPM(argv[3]))
      return 1;

    image_gen1 = scroller1;
    image_gen2 = scroller2;
    image_gen3 = scroller3;
  }

  if (image_gen1 == NULL || image_gen2 == NULL || image_gen3 == NULL)
    return 1;

  RGBMatrixManipulator *updater1 = new DisplayUpdater(&m1);
  RGBMatrixManipulator *updater2 = new DisplayUpdater(&m2);
  RGBMatrixManipulator *updater3 = new DisplayUpdater(&m3);

  updater1->Start(10);
  image_gen1->Start();
  getchar();
  delete image_gen1;
  delete updater1;
  m1.ClearScreen();
  m1.UpdateScreen();

  updater2->Start(10);
  image_gen2->Start();
  getchar();
  delete image_gen2;
  delete updater2;
  m2.ClearScreen();
  m2.UpdateScreen();

  updater3->Start(10);
  image_gen3->Start();
  getchar();
  delete image_gen3;
  delete updater3;
  m3.ClearScreen();
  m3.UpdateScreen();

  return 0;
}
